/**
* Klarna Payments API V1
* API spec
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package org.oasis.klarnasdk.kotlin.model


import com.squareup.moshi.Json
/**
 * 
 * @param date_of_birth Customer’s date of birth. The format is ‘yyyy-mm-dd’
 * @param gender Customer’s gender - ‘male’ or ‘female’
 * @param last_four_ssn Last four digits of the customer's social security number. This value is available for US customers.
 * @param national_identification_number The customer's national identification number. This value is available for EU customers utilizing national identification numbers.
 * @param organization_entity_type Organization entity type. Only applicable for B2B customers.
 * @param organization_registration_id Organization registration id. Only applicable for B2B customers.
 * @param title Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\"
 * @param type Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.
 * @param vat_id VAT ID. Only applicable for B2B customers.
 */
data class Customer (
    /* Customer’s date of birth. The format is ‘yyyy-mm-dd’ */
    val date_of_birth: kotlin.String? = null,
    /* Customer’s gender - ‘male’ or ‘female’ */
    val gender: kotlin.String? = null,
    /* Last four digits of the customer's social security number. This value is available for US customers. */
    val last_four_ssn: kotlin.String? = null,
    /* The customer's national identification number. This value is available for EU customers utilizing national identification numbers. */
    val national_identification_number: kotlin.String? = null,
    /* Organization entity type. Only applicable for B2B customers. */
    val organization_entity_type: Customer.OrganizationEntityType? = null,
    /* Organization registration id. Only applicable for B2B customers. */
    val organization_registration_id: kotlin.String? = null,
    /* Customer’s Title. Allowed values per country: UK - \"Mr\", \"Ms\" DE - \"Herr\", \"Frau\" AT: \"Herr, \"Frau\" CH: de-CH: \"Herr, \"Frau\" it-CH: \"Sig.\", \"Sig.ra\" fr-CH: \"M\", \"Mme\"  BE: \"Dhr.\", \"Mevr.\" NL: \"Dhr.\", \"Mevr.\" */
    val title: kotlin.String? = null,
    /* Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session. */
    val type: kotlin.String? = null,
    /* VAT ID. Only applicable for B2B customers. */
    val vat_id: kotlin.String? = null
) {

    /**
    * Organization entity type. Only applicable for B2B customers.
    * Values: lIMITEDCOMPANY,pUBLICLIMITEDCOMPANY,eNTREPRENEURIALCOMPANY,lIMITEDPARTNERSHIPLIMITEDCOMPANY,lIMITEDPARTNERSHIP,gENERALPARTNERSHIP,rEGISTEREDSOLETRADER,sOLETRADER,cIVILLAWPARTNERSHIP,pUBLICINSTITUTION,oTHER
    */
    enum class OrganizationEntityType(val value: kotlin.String){
    
        @Json(name = "LIMITED_COMPANY") lIMITEDCOMPANY("LIMITED_COMPANY"),
    
        @Json(name = "PUBLIC_LIMITED_COMPANY") pUBLICLIMITEDCOMPANY("PUBLIC_LIMITED_COMPANY"),
    
        @Json(name = "ENTREPRENEURIAL_COMPANY") eNTREPRENEURIALCOMPANY("ENTREPRENEURIAL_COMPANY"),
    
        @Json(name = "LIMITED_PARTNERSHIP_LIMITED_COMPANY") lIMITEDPARTNERSHIPLIMITEDCOMPANY("LIMITED_PARTNERSHIP_LIMITED_COMPANY"),
    
        @Json(name = "LIMITED_PARTNERSHIP") lIMITEDPARTNERSHIP("LIMITED_PARTNERSHIP"),
    
        @Json(name = "GENERAL_PARTNERSHIP") gENERALPARTNERSHIP("GENERAL_PARTNERSHIP"),
    
        @Json(name = "REGISTERED_SOLE_TRADER") rEGISTEREDSOLETRADER("REGISTERED_SOLE_TRADER"),
    
        @Json(name = "SOLE_TRADER") sOLETRADER("SOLE_TRADER"),
    
        @Json(name = "CIVIL_LAW_PARTNERSHIP") cIVILLAWPARTNERSHIP("CIVIL_LAW_PARTNERSHIP"),
    
        @Json(name = "PUBLIC_INSTITUTION") pUBLICINSTITUTION("PUBLIC_INSTITUTION"),
    
        @Json(name = "OTHER") oTHER("OTHER");
    
    }

}

